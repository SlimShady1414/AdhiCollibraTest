name: Add Metadata Headers to JSON Files

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  update-json-files:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout AdhiCollibraTest repository
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
        
      - name: Install dependencies
        run: npm install --save jsonfile

      - name: Create intermediate files with metadata headers
        run: |
          # Define the required metadata headers
          const metadata = {
            "$schema": "https://sap.github.io/open-resource-discovery/spec-v1/interfaces/Document.schema.json",
            "openResourceDiscovery": "1.9",
            "policyLevels": "sap:core:v1",
            "dataProducts": []
          };

          const fs = require('fs');
          const path = require('path');
          const jsonfile = require('jsonfile');

          const baseDir = 'hcm_dpd/DPDFiles/sap/sf/';  # Change this to match the directory structure in AdhiCollibraTest
          const outputDir = 'modified_json';  # Output directory where modified files will be saved
          
          // Create the output directory if it doesn't exist
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir);
          }

          // Function to recursively iterate through directories and update JSON files
          function updateJsonFiles(dir) {
            const files = fs.readdirSync(dir);
            files.forEach(file => {
              const fullPath = path.join(dir, file);
              const stat = fs.lstatSync(fullPath);
              
              if (stat.isDirectory()) {
                // Recursively process directories
                updateJsonFiles(fullPath);
              } else if (file.endsWith('.json')) {
                // Read the JSON file
                jsonfile.readFile(fullPath, (err, obj) => {
                  if (err) {
                    console.error('Error reading JSON file:', err);
                    return;
                  }

                  // Prepend the metadata headers and append the closing brackets
                  obj = { ...metadata, dataProducts: [{ ...obj }] };

                  // Generate the new output file path
                  const relativePath = path.relative(baseDir, fullPath);
                  const outputFilePath = path.join(outputDir, relativePath);

                  // Create the necessary directories for the output file path
                  const outputDirPath = path.dirname(outputFilePath);
                  if (!fs.existsSync(outputDirPath)) {
                    fs.mkdirSync(outputDirPath, { recursive: true });
                  }

                  // Write the updated JSON to the new intermediate file
                  jsonfile.writeFile(outputFilePath, obj, { spaces: 2 }, (err) => {
                    if (err) {
                      console.error('Error writing JSON file:', err);
                    } else {
                      console.log(`Created intermediate file: ${outputFilePath}`);
                    }
                  });
                });
              }
            });
          }

          // Start processing the files from the base directory
          updateJsonFiles(baseDir);
